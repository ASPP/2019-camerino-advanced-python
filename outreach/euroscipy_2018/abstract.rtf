{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Python by smell \'97 Advanced Python constructs for scientists and engineers\
\
\
Abstract\
\
Learn to recognize the \'93smell\'94 of generator, decorators, and context managers! This is a practical guide to the use of advanced Python constructs in scientific code through real-life examples.\
\
\
Description\
\
We scientist and engineers often write code that is\'85  \'93goal-oriented\'94, and normally shy away from baroque Python constructions. Most of us happily chain numpy, pandas, seaborn, and dozens other libraries, but rarely consider the option of writing a generator.\
\
However, generators, decorators, and context managers have the potential to save us quite some time by eliminating repetitions and making the code more transparent and testable.\
\
In this tutorial we will learn to recognize the smell of code that could be improved by a generator, decorator, or a context manager through real-life examples. We will avoid arguments about the beauty of closures and the theoretical advantages of functions as first-class objects, and focus on getting science done!\
\
\
Tweet\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Learn to recognize the \'93smell\'94 of generator, decorators, and context managers!}